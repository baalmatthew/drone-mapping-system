#!/usr/bin/env python3
import cv2
import numpy as np
import glob
import os

# === –ü–ê–†–ê–ú–ï–¢–†–´ –ù–ê–°–¢–†–û–ô–ö–ò ===
image_dir = os.path.expanduser('~/images')

cols = 4        # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
rows = 4        # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä—è–¥–æ–≤
scale = 1.0     # –º–∞—Å—à—Ç–∞–± (1.0 ‚Äî –æ—Ä–∏–≥–∏–Ω–∞–ª)
skip_step = 5   # üî∏ –ø—Ä–æ–ø—É—Å–∫ –∫–∞–¥—Ä–æ–≤ (1 ‚Äî –≤—Å–µ, 2 ‚Äî —á–µ—Ä–µ–∑ –æ–¥–∏–Ω –∏ —Ç.–¥.)
rotate_backwards_rows = True  # üî∏ –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å —Ä—è–¥—ã, –≥–¥–µ –¥—Ä–æ–Ω –ª–µ—Ç–µ–ª –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
rotate_each_image = True      # üî∏ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞—Ç—å –∫–∞–∂–¥—ã–π –∫–∞–¥—Ä –Ω–∞ 90¬∞ –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ

# === –ó–ê–ì–†–£–ó–ö–ê –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô ===
images = sorted(glob.glob(os.path.join(image_dir, 'frame_*.jpg')))
if not images:
    print("‚ùå –ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –ø–∞–ø–∫–µ ~/images")
    exit()

# –ü—Ä–æ–ø—É—Å–∫ –∫–∞–¥—Ä–æ–≤
if skip_step > 1:
    images = images[::skip_step]

print(f"[INFO] –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (—Å —É—á—ë—Ç–æ–º –ø—Ä–æ–ø—É—Å–∫–∞)")

# –ü—Ä–æ–±—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –µ–≥–æ —Ä–∞–∑–º–µ—Ä
sample = cv2.imread(images[0])
if sample is None:
    print("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    exit()

orig_h, orig_w, _ = sample.shape
h, w = int(orig_h * scale), int(orig_w * scale)

# === –°–û–ó–î–ê–Å–ú –ü–£–°–¢–û–ï –ü–û–õ–û–¢–ù–û –ü–û–î –ö–ê–†–¢–£ ===
# –ü–æ—Å–∫–æ–ª—å–∫—É –ø–æ–≤–æ—Ä–æ—Ç –º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∫–∞–∂–¥–æ–≥–æ –±–ª–æ–∫–∞
block_h, block_w = (w, h) if rotate_each_image else (h, w)
canvas_height = rows * block_h
canvas_width = cols * block_w
canvas = np.zeros((canvas_height, canvas_width, 3), dtype=np.uint8)

# === –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –†–ê–ó–ú–ï–©–ï–ù–ò–Ø ===
img_id = 0
for row in range(rows):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ö–æ–¥–∞
    if row % 2 == 0:
        x_range = range(cols)
        reverse = False
    else:
        x_range = reversed(range(cols))
        reverse = rotate_backwards_rows

    for col in x_range:
        if img_id >= len(images):
            break

        img = cv2.imread(images[img_id])
        if img is None:
            print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω —Ñ–∞–π–ª {images[img_id]} (–æ—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è)")
            img_id += 1
            continue

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        if scale != 1.0:
            img = cv2.resize(img, (w, h))

        # –ü–æ–≤–æ—Ä–æ—Ç –∫–∞–∂–¥–æ–≥–æ –∫–∞–¥—Ä–∞ –Ω–∞ 90¬∞ –ø–æ —á–∞—Å–æ–≤–æ–π —Å—Ç—Ä–µ–ª–∫–µ
        if rotate_each_image:
            img = cv2.rotate(img, cv2.ROTATE_90_CLOCKWISE)

        # –†–∞–∑–º–µ—Ä—ã –ø–æ—Å–ª–µ –ø–æ–≤–æ—Ä–æ—Ç–∞
        img_h, img_w = img.shape[:2]

        # –†–∞–∑–≤–æ—Ä–æ—Ç —Ä—è–¥–∞
        if reverse:
            img = cv2.rotate(img, cv2.ROTATE_180)

        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤—Å—Ç–∞–≤–∫–∏
        y0, y1 = row * block_h, row * block_h + img_h
        x0, x1 = col * block_w, col * block_w + img_w

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥—Ä–∞–Ω–∏—Ü (–Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —Ä–∞–∑–º–µ—Ä—ã –Ω–µ —Å–æ–≤–ø–∞–ª–∏)
        y1 = min(y1, canvas.shape[0])
        x1 = min(x1, canvas.shape[1])
        img_h = y1 - y0
        img_w = x1 - x0

        canvas[y0:y1, x0:x1] = img[:img_h, :img_w]

        img_id += 1

# === –°–û–•–†–ê–ù–ï–ù–ò–ï –†–ï–ó–£–õ–¨–¢–ê–¢–ê ===
output_path = os.path.join(image_dir, 'map_stitched.jpg')
cv2.imwrite(output_path, canvas)

print("‚úÖ –°—à–∏–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.")
print(f"üì∏ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ {img_id} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.")
print(f"üó∫Ô∏è  –ò—Ç–æ–≥–æ–≤–∞—è –∫–∞—Ä—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {output_path}")
print(f"üìè –†–∞–∑–º–µ—Ä –∏—Ç–æ–≥–æ–≤–æ–π –∫–∞—Ä—Ç—ã: {canvas.shape[1]}√ó{canvas.shape[0]} –ø–∏–∫—Å–µ–ª–µ–π.")
